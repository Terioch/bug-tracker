@using Microsoft.AspNetCore.Identity
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common

@inject UserManager<ApplicationUser> userManager

@model BugTracker.Models.TicketViewModel

@{
    ViewData["Title"] = "Ticket";
    ApplicationUser loggedInUser = await userManager.FindByNameAsync(User.Identity.Name);
}

<div id="ticketContainer" data-id="@Model.Id">    
    <div class="row g-4 d-flex mb-3">        
        <div class="col col-xl-auto p-0">
            <div class="card-header">
                <h4>@Model.Title</h4> 
                <div>
                    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> |
                    <a asp-action="ListTickets" class="text-primary">Back to List</a> |
                    <a href="" class="text-danger" data-bs-toggle="modal" data-bs-target="#deleteTicketModal">Delete</a>
                </div>
            </div>   

            <ul class="list-group list-group-flush">
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Ticket Description</p>
                    <small>@Model.Description</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Project Name</p>
                    <small>@Model.Project.Name</small>
                </li>
                <li class="list-group-item list-group-item-light">
                <p class="mb-1 fw-bold">Assigned Developer</p>
                @if (Model.AssignedDeveloper != null) {
                    <small>@Model.AssignedDeveloper.UserName</small>
                } else
                {
                    <small>None</small>
                }
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Submitted By</p>
                    <small>@Model.Submitter.UserName</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Created At</p>
                    <small>@Model.SubmittedDate</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Ticket Type</p>
                    <small>@Model.Type</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Ticket Status</p>
                    <small>@Model.Status</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Priority</p>
                    <small>@Model.Priority</small>
                </li>                            
            </ul>
        </div>

        <div class="col">
            <div class="card mb-3">
                <div class="card-header bg-light">
                    <h1 class="fs-3 mt-1">Ticket History</h1>
                    <p class="text-secondary mb-0">Record of changes to this ticket</p>
                </div>
                <div class="card-body">                 
                    @if (!Model.TicketHistoryRecords.Any())
                    {
                        <div class="alert alert-info fs-5 mt-3" role="alert">
                          There is no available history for this ticket.
                        </div>
                    } else
                    {                                        
                        <table class="table">
                            <thead>
                                <tr>          
                                    <th scope="col">Property</th>
                                    <th scope="col">Old Value</th>
                                    <th scope="col">New Value</th>                     
                                    <th scope="col">Modified By</th>                     
                                    <th scope="col">Date Changed</th>                     
                                </tr>
                            </thead>                                                
                            <tbody>                                     
                                @foreach (var record in Model.TicketHistoryRecords) 
                                {
                                    <tr>
                                        <td>@record.Property</td>
                                        @if (record.OldValue != null) {
                                            <td>@record.OldValue</td>
                                        } else
                                        {
                                            <td>Null</td>
                                        }     
                                        @if (record.NewValue != null) {
                                            <td>@record.NewValue</td>
                                        } else
                                        {
                                            <td>Null</td>
                                        }   
                                        <td>@record.Modifier</td>
                                        <td>@record.ModifiedAt</td>
                                    </tr>   
                                }                                                  
                            </tbody>
                        </table>
                        <div>
                            <p class="text-secondary" style="font-size: 14px">
                                Page @(Model.TicketHistoryRecords.PageCount < Model.TicketHistoryRecords.PageNumber ? 0 : Model.TicketHistoryRecords.PageNumber) 
                                of @Model.TicketHistoryRecords.PageCount
                            </p>                   
                            @Html.PagedListPager(
                                Model.TicketHistoryRecords, 
                                page => Url.Action("Details", new { Model.Id, page }),
                                new PagedListRenderOptions() 
                                {
                                    UlElementClasses = new string[] { "pagination", "mb-0" },
                                    LiElementClasses = new string[] { "page-item" },
                                    PageClasses = new string[] { "page-link" }
                                })
                        </div>                         
                    }  
                </div>
            </div>            
        </div>
    </div>

    <div class="row g-4 d-flex flex-column flex-md-row">                
        <div class="col">
            <!-- Create Ticket Attachment -->
            <h1 class="fs-3 mb-3">Ticket Attachments</h1>
            <div class="card-body bg-light mb-3">                               
                <div class="mb-3">
                    <!--<input type="file" value="Attach File" class="btn btn-primary"><i class="fs-5 bi-paperclip pe-2"></i>-->
                    <div class="input-group-sm">
                      <input type="file" class="form-control" id="attachFileInput" style="max-width: 300px">                      
                    </div>
                </div>             
                <div class="input-group-sm mb-3" style="max-width: 300px">          
                    <input type="text" class="form-control" placeholder="Description..." aria-label="Description" aria-describedby="ticket-description">
                </div>
                <button class="btn btn-success">Upload Attachment</button>
            </div>

            <!-- Ticket Attachment Image Grid -->                                                                  
            <div class="">                 
                @if (5 != null)
                {
                    <div class="alert alert-info fs-5 mt-3" role="alert">
                        There are no available attachments to display.
                    </div>
                } else
                {              
                    <div class="row g-3">
                        <div class="col-md-6">
                            @foreach (var attachment in Model.TicketComments)
                            {
                                <picture>
                                    <source srcset="..." type="image/svg+xml">
                                    <img src="attachment src" class="img-fluid" alt="attachment src" />                                        
                                </picture>
                            }
                        </div>
                    </div>                        

                    <div>
                        <p class="text-secondary" style="font-size: 14px">
                            Page @(Model.TicketHistoryRecords.PageCount < Model.TicketHistoryRecords.PageNumber ? 0 : Model.TicketHistoryRecords.PageNumber) 
                            of @Model.TicketHistoryRecords.PageCount
                        </p>                   
                        @Html.PagedListPager(
                            Model.TicketHistoryRecords, 
                            page => Url.Action("Details", new { Model.Id, page }),
                            new PagedListRenderOptions() 
                            {
                                UlElementClasses = new string[] { "pagination", "mb-0" },
                                LiElementClasses = new string[] { "page-item" },
                                PageClasses = new string[] { "page-link" }
                            })
                    </div>                         
                }  
            </div>                    
        </div>

        <!-- Ticket Comment Section -->
        <div class="col">
            <h1 class="fs-3 mb-3">Ticket Comments</h1>
            <div id="commentCreationValidationErrors" class="text-danger mb-3"></div>
            <div class="input-group mb-3" style="max-width: 300px">
                <input id="commentDescriptionInput" type="text" class="form-control" placeholder="Comment..." aria-label="Comment" aria-describedby="ticket-comment">
            </div>
            <div class="pb-3 border-bottom">
                <button id="createCommentBtn" class="btn btn-secondary mb-3">Add comment</button>
            </div>            

            <div id="commentListContainer">
                @if (!Model.TicketComments.Any())
                {
                    <div id="commentListGroup" class="alert alert-info fs-5 mt-3" role="alert">
                        No one has commented on this ticket.
                    </div>
                } else
                {
                    <ul id="commentListGroup" class="list-group list-group-flush mb-3">
                        @foreach (var comment in Model.TicketComments)
                        {
                            <li class="comment-list-item list-group-item" data-commentId="@comment.Id">
                                @if (comment.Author == loggedInUser || await userManager.IsInRoleAsync(comment.Author, "Admin"))
                                {
                                    <small class="text-secondary">@comment.Author.UserName commented on @comment.CreatedAt <a href="" class="delete-comment-trigger link-danger ms-1" data-bs-toggle="modal" data-bs-target="#deleteCommentModal">Delete</a></small>   
                                } else
                                {
                                    <small class="text-secondary">@comment.Author.UserName commented on @comment.CreatedAt</small>
                                }                                
                                <p class="mt-2 mb-0">@comment.Value</p>
                            </li>
                        }
                    </ul>

                    <div>
                        <p class="text-secondary" style="font-size: 14px">
                            Page @(Model.TicketComments.PageCount < Model.TicketComments.PageNumber ? 0 : Model.TicketComments.PageNumber) 
                            of @Model.TicketComments.PageCount
                        </p>                   
                        @Html.PagedListPager(
                            Model.TicketComments, 
                            page => Url.Action("Details", new { Model.Id, page }),
                            new PagedListRenderOptions() 
                            {
                                UlElementClasses = new string[] { "pagination", "mb-0" },
                                LiElementClasses = new string[] { "page-item" },
                                PageClasses = new string[] { "page-link" }
                            })
                    </div>
                }
            </div>                                    
        </div>
    </div>
</div>

<!-- Delete Ticket Modal -->
<div class="modal fade" id="deleteTicketModal" tabindex="-1" aria-labelledby="deleteTicketModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Ticket Removal</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-footer">
        <button asp-action="Delete" type="button" id="deleteTicketBtn" class="btn btn-danger" data-bs-dismiss="modal" aria-label="Confirm">Confirm</button>       
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Cancel">Cancel</button>       
      </div>
    </div>
  </div>
</div>

<!-- Delete Ticket Comment Modal -->
<div class="modal fade" id="deleteCommentModal" tabindex="-1" aria-labelledby="deleteCommentModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Confirm Comment Removal</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-footer">
        <button type="button" id="deleteCommentBtn" class="btn btn-danger" data-bs-dismiss="modal" aria-label="Confirm">Confirm</button>       
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" aria-label="Cancel">Cancel</button>       
      </div>
    </div>
  </div>
</div>