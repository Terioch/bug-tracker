@using BugTracker.Contexts
@using BugTracker.Helpers
@using Microsoft.AspNetCore.Identity
@using X.PagedList
@using X.PagedList.Mvc.Core
@using X.PagedList.Web.Common

@inject UserManager<ApplicationUser> userManager
@inject TicketHelper ticketHelper

@model TicketViewModel

@{
    ViewData["Title"] = "Ticket";
    ApplicationUser loggedInUser = await userManager.FindByNameAsync(User.Identity.Name);
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div id="ticketContainer" data-id="@Model.Id">    
    <div class="row g-4 d-flex mb-3">        
        <div class="col col-xl-4 col-lg-auto p-0">
            <div class="card-header">
                <h1 class="fs-4">@Model.Title</h1> 
                <div> 
                    @if (await ticketHelper.IsAssignedDeveloper(Model.Id))
                    {
                        <Span><a href="" class="link-info" data-bs-toggle="modal" data-bs-target="#updateTicketStatusModal">Update Status</a> |</Span>
                    }    
                    else if (await ticketHelper.IsAuthorizedToEdit(Model.Id))
                    {
                        <span><a asp-action="Edit" asp-route-id="@Model.Id" class="link-info">Edit</a> |</span>                                                                      
                    }                                     

                    <a asp-action="ListTickets" class="link-primary">Back to List</a>

                    @if (await ticketHelper.IsAuthorizedToDelete(Model.Id))
                    {
                        <span>
                            | <a asp-action="Delete" asp-route-id="@Model.Id" class="text-danger" 
                                onclick="return confirm('Are you sure you want to delete the ticket @Model.Title?')">
                                Delete
                            </a>
                        </span>                        
                    }
                </div>
            </div>   

            <ul class="list-group list-group-flush">                
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Ticket Description</p>
                    <small>@Model.Description</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Project Name</p>
                    @if (Model.ProjectId != null)
                    {
                        <small>@Model.Project.Name</small>
                    } else
                    {
                        <small>None</small>
                    }                                       
                </li>
                <li class="list-group-item list-group-item-light">
                <p class="mb-1 fw-bold">Assigned Developer</p>
                @if (Model.AssignedDeveloperId != null) 
                {
                    <small>@Model.AssignedDeveloper.UserName</small>
                } else
                {
                    <small>None</small>
                }
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Submitted By</p>
                    <small>@Model.Submitter?.UserName</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Created At</p>
                    <small>@Model.SubmittedDate</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Ticket Type</p>
                    <small>@Model.Type</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Ticket Status</p>
                    <small>@Model.Status</small>
                </li>
                <li class="list-group-item list-group-item-light">
                    <p class="mb-1 fw-bold">Priority</p>
                    <small>@Model.Priority</small>
                </li>                                            
            </ul>
        </div>

        <div class="col">            
            <div class="card mb-3">
                <div class="card-header bg-light">
                    <h1 class="fs-3 mt-1">Ticket History</h1>
                    <p class="text-secondary mb-0">Records of changes to this ticket</p>
                </div>
                <div class="card-body">
                    <div class="input-group-sm">
                        <input id="historyListSearchInput" class="form-control mb-3" placeholder="Search History..." style="max-width: 175px"  />
                    </div>
                    <div id="historyListContainer">
                        @if (!Model.TicketHistoryRecords.Any())
                        {
                            <div class="alert alert-primary fs-5 mt-3" role="alert">
                              There is no available history for this ticket.
                            </div>
                        } else
                        {        
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>          
                                            <th scope="col">Property</th>
                                            <th scope="col">Old Value</th>
                                            <th scope="col">New Value</th>                     
                                            <th scope="col">Modified By</th>                     
                                            <th scope="col">Date Changed</th>                     
                                        </tr>
                                    </thead>                                                
                                    <tbody>                                     
                                        @foreach (var record in Model.TicketHistoryRecords) 
                                        {
                                            <tr>
                                                <td>@record.Property</td>
                                                @if (record.OldValue != null) {
                                                    <td>@record.OldValue</td>
                                                } else
                                                {
                                                    <td>Null</td>
                                                }     
                                                @if (record.NewValue != null) {
                                                    <td>@record.NewValue</td>
                                                } else
                                                {
                                                    <td>Null</td>
                                                }   
                                                <td>@record.Modifier.UserName</td>
                                                <td>@record.ModifiedAt</td>
                                            </tr>   
                                        }                                                  
                                    </tbody>
                                </table>
                            </div>                            
                            <div>
                                <p class="text-secondary" style="font-size: 14px">
                                    Page @(Model.TicketHistoryRecords.PageCount < Model.TicketHistoryRecords.PageNumber ? 0 : Model.TicketHistoryRecords.PageNumber) 
                                    of @Model.TicketHistoryRecords.PageCount
                                </p>                   
                                @Html.PagedListPager(
                                    Model.TicketHistoryRecords, 
                                    page => Url.Action("Details", new { Model.Id, historyPage = page }),
                                    new PagedListRenderOptions() 
                                    {
                                        UlElementClasses = new string[] { "pagination", "mb-0" },
                                        LiElementClasses = new string[] { "page-item" },
                                        PageClasses = new string[] { "page-link" }
                                    })
                            </div>                         
                        }
                    </div>                      
                </div>
            </div>            
        </div>
    </div>

    <div class="row g-4 d-flex flex-column flex-md-row">                
        <div class="col">
            <!-- Create Ticket Attachment -->
            <h1 class="fs-3 mb-3">Ticket Attachments</h1>
          
            <div class="card-body bg-light mb-3">  
                <form class="mb-0" method="post" asp-controller="TicketAttachment" asp-action="Create" enctype="multipart/form-data">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>                
                    <input name="TicketId" value="@Model.Id" type="hidden" />
                    <div class="mb-3">                        
                        <div class="input-group-sm">
                            <input name="AttachmentName" class="form-control" placeholder="Name" style="max-width: 300px" />
                        </div>
                    </div>                       
                    <div class="mb-3">
                        <!--<input type="file" value="Attach File" class="btn btn-primary"><i class="fs-5 bi-paperclip pe-2"></i>-->
                        <div class="input-group-sm">
                            <input type="file" name="FileAttachment" class="form-control" style="max-width: 300px">                      
                        </div>
                    </div>   
                    @if (await ticketHelper.IsAuthorizedToEdit(Model.Id)) 
                    {
                        <button type="submit" class="btn btn-primary">
                            <span class="me-2">Upload</span><i class="fa-solid fa-file-arrow-up fa-lg"></i>
                        </button>
                    } else 
                    {
                        <button type="submit" class="btn btn-primary disabled">
                            <span class="me-2">Upload</span><i class="fa-solid fa-file-arrow-up fa-lg"></i>
                        </button>
                    }
                </form>  
            </div>                      

            <!-- Ticket Attachment Image Grid -->                                                                  
            <div class="">                 
                @if (!Model.TicketAttachments.Any())
                {
                    <div class="alert alert-primary fs-5 mt-3" role="alert">
                        There are no available attachments to display.
                    </div>
                } else
                {              
                    <div class="row g-3 mb-3">                        
                        @foreach (var attachment in Model.TicketAttachments)
                        {                           
                            <div class="col-xl-6 col-md-12 col-sm-6">
                                <div class="card h-100 w-100">                                    
                                    <img src="~/attachments/@attachment.FilePath" asp-append-version="true" class="card-img-top img-fluid h-100 w-100" alt="@attachment.FilePath" style="object-fit: cover" />                                    
                                    <div class="card-footer">
                                        <div class="d-flex justify-content-between">
                                            <h5 class="card-subtitle mt-0 mb-1">@attachment.Name</h5>
                                            <div>
                                                @if (attachment.Submitter == loggedInUser || await userManager.IsInRoleAsync(loggedInUser, "Admin"))
                                                {
                                                    <a asp-action="Edit" asp-controller="TicketAttachment" asp-route-id="@attachment.Id" class="link-info">Edit</a>
                                                    <a asp-controller="TicketAttachment" asp-action="Delete" asp-route-id="@attachment.Id" class="link-danger" 
                                                        onclick="return confirm('Are you sure you want to delete the attachment @attachment.Name?')">
                                                        Delete
                                                    </a>   
                                                }                                              
                                            </div>
                                        </div>                                        
                                        <p class="text-secondary mb-0">@attachment.CreatedAt</p>
                                    </div>
                                </div>
                            </div>                                                       
                        }
                    </div>                                    

                    <div>
                        <p class="text-secondary" style="font-size: 14px">
                            Page @(Model.TicketAttachments.PageCount < Model.TicketAttachments.PageNumber ? 0 : Model.TicketAttachments.PageNumber) 
                            of @Model.TicketAttachments.PageCount
                        </p>                   
                        @Html.PagedListPager(
                            Model.TicketAttachments, 
                            page => Url.Action("Details", new { Model.Id, attachmentsPage = page }),
                            new PagedListRenderOptions() 
                            {
                                UlElementClasses = new string[] { "pagination", "mb-0" },
                                LiElementClasses = new string[] { "page-item" },
                                PageClasses = new string[] { "page-link" }
                            })
                    </div>                         
                }  
            </div>                    
        </div>

        <!-- Ticket Comment Section -->
        <div class="col">       
            <h1 class="fs-3 mb-3">Ticket Comments</h1>
            <div id="commentCreationValidationErrors" class="text-danger mb-3"></div>
            @*<div class="input-group mb-3" style="max-width: 300px">
                <input id="commentDescriptionInput" type="text" class="form-control" placeholder="Comment..." aria-label="Comment" aria-describedby="ticket-comment">
            </div>*@
            <div class="form-floating mb-3">
              <textarea class="form-control" placeholder="Leave a comment here" id="commentDescriptionInput" style="height: 100px"></textarea>
              <label class="text-secondary" for="commentDescriptionInput">Leave a new comment</label>
            </div>
            <div class="pb-3 mb-3 border-bottom">
                <button id="createCommentBtn" class="btn btn-secondary">
                    Add Comment
                </button>
            </div>                    
            <div class="input-group-sm mb-3">
                <input id="commentListSearchInput" class="form-control" type="text" placeholder="Search by Author..." style="max-width: 175px" />
            </div>                      

            <div id="commentListContainer">
                @if (!Model.TicketComments.Any())
                {
                    <div id="commentListGroup" class="alert alert-primary fs-5 mt-3" role="alert">
                        No one has commented on this ticket.
                    </div>
                } else
                {
                    <ul id="commentListGroup" class="list-group list-group-flush mb-3">
                        @foreach (var comment in Model.TicketComments)
                        {
                            <li class="comment-list-item list-group-item" data-commentId="@comment.Id">
                                @if (comment.Author == loggedInUser || await userManager.IsInRoleAsync(loggedInUser, "Admin"))
                                {
                                    <small class="text-secondary">@comment?.Author?.UserName commented on @comment.CreatedAt 
                                        <a asp-controller="TicketComment" asp-action="Delete" asp-route-id="@comment.Id" class="link-danger ms-1" 
                                            onclick="return confirm('Are you sure you want to delete this comment?')">
                                            Delete
                                        </a>   
                                    </small>   
                                } else
                                {
                                    <small class="text-secondary">@comment?.Author?.UserName commented on @comment.CreatedAt</small>
                                }                                
                                <p class="mt-2 mb-0">@comment.Value</p>
                            </li>
                        }
                    </ul>

                    <div>
                        <p class="text-secondary" style="font-size: 14px">
                            Page @(Model.TicketComments.PageCount < Model.TicketComments.PageNumber ? 0 : Model.TicketComments.PageNumber) 
                            of @Model.TicketComments.PageCount
                        </p>                   
                        @Html.PagedListPager(
                            Model.TicketComments, 
                            page => Url.Action("Details", new { Model.Id, commentsPage = page }),
                            new PagedListRenderOptions() 
                            {
                                UlElementClasses = new string[] { "pagination", "mb-0" },
                                LiElementClasses = new string[] { "page-item" },
                                PageClasses = new string[] { "page-link" }
                            })
                    </div>
                }
            </div>                                    
        </div>
    </div>
</div>

<!-- Update Ticket Status Modal -->
<div class="modal fade" id="updateTicketStatusModal" tabindex="-1" aria-labelledby="updateTicketStatusModal" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">     
            <form asp-action="EditStatus" method="post">
                <div class="modal-header">
                    <h5 class="modal-title">Update the status of this ticket</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <input asp-for="Id" type="hidden" />
                    <label class="create-ticket-select-label control-label mb-2 text-secondary">Ticket Status</label>                     
                    <select asp-for="Status" class="form-select mb-4" aria-label="Ticket project">                                                
                        @foreach (var status in TicketContext.Statuses)
                        {
                            <option>@status</option>
                        }  
                    </select>           
                    <div asp-validation-summary="ModelOnly" class="text-danger mt-3"></div>
                </div>
                <div class="modal-footer text-left">                
                    <button type="submit" class="btn btn-success add-user">Update</button>                
                </div> 
            </form>                           
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/ticket/ticket.js"></script>
}